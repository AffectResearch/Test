import gymnasium as gym
import numpy as np
import matplotlib.pyplot as plt
import pickle

def run(episodes, render=False):

    env = gym.make('FrozenLake-v1', map_name="8x8", is_slippery=False, render_mode='human' if render else None)

    q = np.zeros((env.observation_space.n, env.action_space.n))

    learning_rate_a = 0.9
    discount_factor = 0.9

    epsilon = 1
    epsilon_decay_rate = 0.00005
    rng = np.random.default_rng()

    rewards_per_episode = np.zeros(episodes)

    for i in range(episodes):
        state = env.reset()[0]
        terminated = False
        truncated = False

        while(not terminated and not truncated):
            if rng.random() < epsilon:
                action = env.action_space.sample()
            else:
                action = np.argmax(q[state,:])
            
            new_state,reward,terminated,truncated,_ = env.step(action)

            q[state,action] = q[state,action] + learning_rate_a * (reward + discount_factor * np.max(q[new_state,:])-q[state, action])

            state = new_state
            rewards_per_episode[i] = rewards_per_episode[i]+reward

        epsilon = max(epsilon - epsilon_decay_rate, 0.1)
        print(rewards_per_episode[i])

        if(epsilon==0):
            learning_rate_a = 0.0001

    env.close()

    sum_rewards = np.zeros(episodes)
    for t in range(episodes):
        sum_rewards[t] = np.sum(rewards_per_episode[max(0,t-100):(t+1)])
    plt.plot(sum_rewards)
    plt.xlabel('Episode')
    plt.ylabel('Cumulative Sum of Rewards')
    plt.title('Training Progress')
    plt.savefig('frozenlake8x8.png')
    plt.show()

    f = open("frozen_lake8x8.pk1","wb")
    pickle.dump(q,f)
    f.close

if __name__ == '__main__':
    run(15000)